{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-06-09T06:47:52.926Z",
    "end": "2021-06-09T06:47:53.001Z",
    "duration": 75,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ae2c2635-63b8-43e0-a12d-8b74e14f978c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b855eb1-ef15-4b01-98df-82533c0c33ef",
          "title": "Probando la API",
          "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
          "file": "\\test\\task.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b148ca72-8745-4f75-9ed8-69c2cdc763b5",
              "title": "GET /api/task",
              "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
              "file": "\\test\\task.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deberia realizar un GET de todos los ejemplos",
                  "fullTitle": "Probando la API GET /api/task Deberia realizar un GET de todos los ejemplos",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n    .get(\"/api/tasks\")\n    .end((err, response) =>{\n        response.should.have.status(200);\n        response.body.should.be.a('array');\n        response.body.length.should.be.eq(3);\n    done();\n    })",
                  "err": {},
                  "uuid": "b8341779-402b-485c-a0ac-30e8f99b75ff",
                  "parentUUID": "b148ca72-8745-4f75-9ed8-69c2cdc763b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deberia no poder realizar un GET de los ejemplos",
                  "fullTitle": "Probando la API GET /api/task Deberia no poder realizar un GET de los ejemplos",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(server)\n//Error inducido en task\n    .get(\"/api/task\")\n    .end((err, response) =>{\n        response.should.have.status(404);\n        \n    done();\n    });",
                  "err": {},
                  "uuid": "f94449b4-b0b9-4b38-9486-a0e088d3641b",
                  "parentUUID": "b148ca72-8745-4f75-9ed8-69c2cdc763b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b8341779-402b-485c-a0ac-30e8f99b75ff",
                "f94449b4-b0b9-4b38-9486-a0e088d3641b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "43df81d4-65b4-4966-ad6c-c800c489eac6",
              "title": "POST /api/task",
              "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
              "file": "\\test\\task.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deberia realizar POST de un nuevo ejemplo",
                  "fullTitle": "Probando la API POST /api/task Deberia realizar POST de un nuevo ejemplo",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**Se genera un objeto task que contiene nombre, estado y completado \n * @type {{name:string, state: string, completed: boolean}}\n*/\nconst task ={\n    name: \"Ejemplo 4\",\n    state: \"Pendiente\",\n    completed: false\n}\nchai.request(server)\n    .post(\"/api/tasks\")\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(201);\n        response.body.should.be.a('object');\n        response.body.should.have.property('id').eq(4);\n        response.body.should.have.property('name').eq(\"Ejemplo 4\");\n        response.body.should.have.property('state').eq(\"Pendiente\");\n        response.body.should.have.property('completed').eq(false);\n    done();\n    });",
                  "err": {},
                  "uuid": "2fb49870-6aff-4abf-8717-aca5b9349dee",
                  "parentUUID": "43df81d4-65b4-4966-ad6c-c800c489eac6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deberia no poder realizar POST de un nuevo ejemplo",
                  "fullTitle": "Probando la API POST /api/task Deberia no poder realizar POST de un nuevo ejemplo",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**Se genera un objeto task\n *  @type {{state: string, completed: boolean}}\n */\nconst task ={\n    //Error inducido al no enviar el name\n    //name: \"Ejemplo 4\",\n    state: \"Pendiente\",\n    completed: false\n}\nchai.request(server)\n    .post(\"/api/tasks\")\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(400);\n        response.text.should.be.eq(\"El nombre debe ser mas largo que 3 caracteres\");\n    done();\n    });",
                  "err": {},
                  "uuid": "cef0d6fa-9bb9-4b45-97f2-e8f78670c5a2",
                  "parentUUID": "43df81d4-65b4-4966-ad6c-c800c489eac6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fb49870-6aff-4abf-8717-aca5b9349dee",
                "cef0d6fa-9bb9-4b45-97f2-e8f78670c5a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 19,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82bc7b21-f628-4828-936d-82604ede7aa1",
              "title": "PUT /api/task:id",
              "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
              "file": "\\test\\task.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deberia realizar un PUT de un ejemplo",
                  "fullTitle": "Probando la API PUT /api/task:id Deberia realizar un PUT de un ejemplo",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API\n *  @type {number}\n */\nconst taskId = 1;\n/**Se genera un objeto task\n *  @type {{name:string, state: string, completed: boolean}}\n*/\nconst task ={\n    name: \"Ejemplo 1 update\",\n    state: \"Completado\",\n    completed: true\n}\nchai.request(server)\n    .put(\"/api/tasks/\" + taskId)\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(200);\n        response.body.should.be.a('object');\n        response.body.should.have.property('id').eq(1);\n        response.body.should.have.property('name').eq(\"Ejemplo 1 update\");\n        response.body.should.have.property('state').eq(\"Completado\");\n        response.body.should.have.property('completed').eq(true);\n    done();\n    });",
                  "err": {},
                  "uuid": "2a40843b-a9ec-4cbe-bfdc-d94629b7a258",
                  "parentUUID": "82bc7b21-f628-4828-936d-82604ede7aa1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deberia no poder realizar un PUT de un ejemplo",
                  "fullTitle": "Probando la API PUT /api/task:id Deberia no poder realizar un PUT de un ejemplo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API\n * @type {number}\n */\nconst taskId = 1;\n/**Se genera un objeto task\n * @type {{name:string, state: string, completed: boolean}}\n*/\nconst task ={\n    //Error inducido al no enviar el name\n    name: \"Ej\",\n    state: \"Completado\",\n    completed: true\n}\nchai.request(server)\n    .put(\"/api/tasks/\" + taskId)\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(400);\n        response.text.should.be.eq(\"El nombre debe ser mas largo que 3 caracteres!\");\n    done();\n    });",
                  "err": {},
                  "uuid": "533ea062-5a2d-4cda-8752-f771d8afc833",
                  "parentUUID": "82bc7b21-f628-4828-936d-82604ede7aa1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a40843b-a9ec-4cbe-bfdc-d94629b7a258",
                "533ea062-5a2d-4cda-8752-f771d8afc833"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c2829372-89c3-4ca6-bd70-1e9367457408",
              "title": "PATCH /api/task:id",
              "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
              "file": "\\test\\task.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deberia realizar un PATCH (estado) de un ejemplo",
                  "fullTitle": "Probando la API PATCH /api/task:id Deberia realizar un PATCH (estado) de un ejemplo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API \n * @type {number}\n*/\nconst taskId = 1;\n/**Se genera un objeto task\n * @type {{name:string, state: string}}\n*/\nconst task ={\n    name: \"Ejemplo 1 state\",\n    state: \"Completado\"\n}\nchai.request(server)\n    .patch(\"/api/tasks/\" + taskId)\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(200);\n        response.body.should.be.a('object');\n        response.body.should.have.property('id').eq(1);\n        response.body.should.have.property('state').eq(\"Completado\");\n        response.body.should.have.property('completed').eq(true);\n    done();\n    });",
                  "err": {},
                  "uuid": "1b8ef3aa-20a2-4ead-9ce1-d07eb5ea4d41",
                  "parentUUID": "c2829372-89c3-4ca6-bd70-1e9367457408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deberia no poder realizar un PATCH (estado) de un ejemplo",
                  "fullTitle": "Probando la API PATCH /api/task:id Deberia no poder realizar un PATCH (estado) de un ejemplo",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API \n * @type {number}\n*/\nconst taskId = 1;\n/**Se genera un objeto task\n * @type {{name:string, state: string}}\n*/\nconst task ={\n    name: \"Ejemplo 1 state\",\n    state: \"Co\"\n}\nchai.request(server)\n    .patch(\"/api/tasks/\" + taskId)\n    .send(task)\n    .end((err, response) =>{\n        response.should.have.status(400);\n        response.text.should.be.eq(\"El estado debe ser mas largo que 3 caracteres!\");\n    done();\n    });",
                  "err": {},
                  "uuid": "d7738587-8339-4290-8665-c594636f0443",
                  "parentUUID": "c2829372-89c3-4ca6-bd70-1e9367457408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b8ef3aa-20a2-4ead-9ce1-d07eb5ea4d41",
                "d7738587-8339-4290-8665-c594636f0443"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc36d2bb-0bf9-4d8c-b96f-af874ea4431b",
              "title": "DELETE /api/task:id",
              "fullFile": "C:\\Users\\Oscar\\Desktop\\Tsoft\\test\\task.js",
              "file": "\\test\\task.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Deberia realizar un Delete de un ejemplo",
                  "fullTitle": "Probando la API DELETE /api/task:id Deberia realizar un Delete de un ejemplo",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API \n * @type {number}\n*/\nconst taskId = 1;\nchai.request(server)\n    .delete(\"/api/tasks/\" + taskId)\n    .end((err, response) =>{\n        response.should.have.status(200);\n    done();\n    });",
                  "err": {},
                  "uuid": "045d8e5b-2cfa-4c75-8353-40eda64db19a",
                  "parentUUID": "fc36d2bb-0bf9-4d8c-b96f-af874ea4431b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Deberia no poder realizar un Delete de un ejemplo",
                  "fullTitle": "Probando la API DELETE /api/task:id Deberia no poder realizar un Delete de un ejemplo",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/** Esta es una variable para almacenar el id proveniente de la API \n * @type {number}\n*/\nconst taskId = 166;\nchai.request(server)\n    .delete(\"/api/tasks/\" + taskId)\n    .end((err, response) =>{\n        response.should.have.status(404);\n        response.text.should.be.eq(\"El ejemplo con ese identificador no existe.\");\n    done();\n    });",
                  "err": {},
                  "uuid": "e89b6b6b-ca66-46fc-97af-7290b0884991",
                  "parentUUID": "fc36d2bb-0bf9-4d8c-b96f-af874ea4431b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "045d8e5b-2cfa-4c75-8353-40eda64db19a",
                "e89b6b6b-ca66-46fc-97af-7290b0884991"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "Test_Report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "Report",
        "reportFilename": "Test_Report"
      },
      "version": "5.2.0"
    }
  }
}